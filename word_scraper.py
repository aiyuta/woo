import streamlit as st
import requests
from bs4 import BeautifulSoup
import re
from audio_recorder_streamlit import audio_recorder
import datetime
import json
import google.generativeai as genai
import random
import os
from groq import Groq
from openai import OpenAI

@st.cache_data(show_spinner=False)
def gemini(input, input_key):
    genai.configure(api_key=input_key)
    model = genai.GenerativeModel('gemini-2.0-flash-exp')
    response = model.generate_content(input)
    
    return response.text
    
def groq(input, input_key):
    client = Groq(
        api_key=input_key,
    )

    chat_completion = client.chat.completions.create(
        messages=[
            {
                "role": "user",
                "content": input,
            }
        ],
        model="llama3-groq-70b-8192-tool-use-preview",
    )
    return chat_completion.choices[0].message.content
def grok(input):
    client = OpenAI(
    input_key='xai-dsGhWxaal2XP7ywNePHrhnKXil9N5ZXhKSvzdG9Zw6imLimqR5IftzV5nt1b4MRBkNPQUCawPpX7xeab',
    base_url="https://api.x.ai/v1",
    )

    completion = client.chat.completions.create(
    model="grok-2-latest",
    messages=[
        {
            "role": "system",
            "content": "You are Grok, a chatbot inspired by the Hitchhikers Guide to the Galaxy."
        },
        {
            "role": "user",
            "content": input
        },
    ],
    )

    return completion.choices[0].message.content

def deepseek(prompts):
    client = OpenAI(api_key = 'cccf51d6-7bf1-4a9d-84fd-ddc308c7e049', base_url="https://api.sambanova.ai/v1")

    response = client.chat.completions.create(
        model="Meta-Llama-3.1-8B-Instruct",
        messages=[
            {"role": "system", "content": "You are a helpful assistant"},
            {"role": "user", "content": prompts},
        ]
    )
    return response.choices[0].message.content

def prounc(search_keyword):
    try:
        page_prounc = requests.get(f"https://www.merriam-webster.com/dictionary/{search_keyword}")    
        soup = BeautifulSoup(page_prounc.text, 'html.parser')
        json_script = soup.find('script', type='application/ld+json')
        json_data = json_script.string.strip()    
        match = re.search(r'"contentURL": "([^"]+)"', json_data)
        if match:
            audio_url = match.group(1)
        return audio_url
    except Exception as e:
        pass

def get_random_keys():
    with open("word_data.json") as f:
        data = json.load(f)

    keys = list(data.keys())
    
    # Filter to only single word keys
    keys = [k for k in keys if len(k.split()) == 1] 

    random_keys = random.sample(keys, 5)
    return " ".join(random_keys)

def note_dolo_to_json():
    # Define a default value for the text box
    default_text = ""

    # Define a dictionary to store the JSON data
    with open("word_data.json") as f: 
        data = json.load(f)

    # Create a text box for the user to input text
    text_box = st.sidebar.text_input("Note here:", value=default_text)

    # Create a submit button
    if st.sidebar.button("Submit"):
        # Get the current time and format it as a string
        now = datetime.datetime.now()
        time_str = now.strftime("%Y-%m-%d %H:%M:%S")

        # Add the text box value to the data dictionary with the current time as the key
        data[time_str] = text_box
         # Save the data to a JSON file
        with open("word_data.json", "w") as f:
            json.dump(data, f, indent=4)

    # Convert the data dictionary to a JSON string
    json_str = json.dumps(data, indent=4)

    # Create a download button for the JSON file
    st.sidebar.download_button(
        label="Download Note",
        data=json_str,
        file_name="word_data.json",
        mime="application/json",
    )

def generate_paragraph_randomly():
    keys = get_random_keys()    
    prompt = "create a paragraph based on the keywords provided directly, no any comments:"
    paragraph = gemini(prompt + ":" + keys, input_key)        
    st.write("generated by gemini")
    
    st.write(keys)             
    st.write(paragraph)

def delete_keyword(file_path: str, keyword: str) -> None:
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"File {file_path} not found.")
    
    with open(file_path, "r") as f:
        data = json.load(f)       
   
    delete_button = st.button("Delete")
    if delete_button:
        del data[keyword]
        
    with open(file_path, "w") as f:
        json.dump(data, f, indent=4)

def get_unsplash_images(keyword, unsplash_access_key):
    """Get images from Unsplash API"""
    try:
        url = f"https://api.unsplash.com/search/photos"
        params = {
            "query": keyword,
            "per_page": 6,
            "client_id": unsplash_access_key
        }
        response = requests.get(url, params=params)
        data = response.json()
        
        if 'results' in data:
            # Extract image URLs
            image_urls = [photo['urls']['regular'] for photo in data['results']]
            return image_urls
        else:
            return []
    except Exception as e:
        st.error(f"Error fetching Unsplash images: {str(e)}")
        return []

st.markdown("<h1 style='text-align:center;'> WORD Scraper </h1>", unsafe_allow_html=True)
# record and play
col5, col6 = st.columns([2, 15])
with col5:
    audio_bytes = audio_recorder(text=' ', pause_threshold=3)
with col6:
    if audio_bytes:
        st.audio(audio_bytes, format='audio/wav')

# input the keys
col_api_keys = st.columns(2)
with col_api_keys[0]:
    input_key = st.text_input('Enter your API key')
    input_key = "AIzaSyATikVLCwHW2yF-J04kBg4oXhyhRD02_0g"
with col_api_keys[1]:
    unsplash_access_key = st.text_input('Enter your Unsplash API key')

# search
with st.form("Search"):
    keyword = st.text_input("Enter your Keyword")
    search = st.form_submit_button("search")

    display_youglish = st.checkbox("Display YouGlish")

    if display_youglish:
        html_code = f"""
            <a id="yg-widget-0" class="youglish-widget" data-query="{keyword}" data-lang="english" data-zones="all,us,uk,aus" data-components="8415" data-bkg-color="theme_light"  rel="nofollow" href="https://youglish.com">Visit YouGlish.com</a>
            <script async src="https://youglish.com/public/emb/widget.js" charset="utf-8"></script>
        """
        placeholder = st.empty()
        st.components.v1.html(html_code, height=600)

col_del, col_mem = st.columns([2, 2])
with col_del:
    try:
        delete_keyword('word_data.json', keyword)
    except Exception as e:
        st.error(str(e))
with col_mem:
    memorize_button = st.button("memorize")
    try:
        res = gemini("help me memorize the word:" + keyword, input_key)
    except:
        pass
if memorize_button:
    try:          
        st.write(res)
    except:
        pass

if search:   
    if keyword[0] == ',':
        keyword = keyword[1:]
        try:
            response = gemini(keyword, input_key)
            st.write("generated by gemini")
        except:
            response = deepseek(keyword)
            st.write("generated by deepseek")
        st.write(response)         
    else:
        # Display the audio 
        link = prounc(keyword)
        col3, col4 = st.columns([2, 2])
        with col3:
            if link:
                st.audio(link, format='audio/mp3')  
        with col4:
            st.markdown(f'[Full Definition](https://www.merriam-webster.com/dictionary/{keyword})')    
        
        # display search result
        try:
            with open("word_data.json") as f: 
                data = json.load(f)      
                if keyword in data:
                    st.write(data[keyword])
                else:
                    
                    len_keyword = keyword.split()
                    
                    if len(len_keyword) == 1:
                        lookup = "You are a kind helpful dictionary assistant.return me with the phonetic, explanation ,root and 5 sentences,display them with breakline.the keyword is"  
                    else:
                        lookup = "please explain and provide 10 sentences based on the key words, display with a breakline "
                    
                    prompts = lookup + ":" + keyword
                    try:
                        grok = gemini(prompts)
                        st.write("generated by grok")
                    except:
                        response = gemini(prompts, input_key)
                        st.write("generated by gemini")
                    st.write(response)         
                    # save to dictionary
                    data[keyword] = "\n" + response
                    # save to data file
                    with open("word_data.json", "w") as f:
                        json.dump(data, f, indent=4)
        except:
            st.write("API problem!")
        
        # Display the images using Unsplash API
        unsplash_access_key = "g_FoG7XjXrn6N9GaIdaCSaHSHwbu9DPdc1DjCH3x-JY"
        if unsplash_access_key:
            image_urls = get_unsplash_images(keyword, unsplash_access_key)
            
            if image_urls:
                col1, col2 = st.columns([2, 2])
                
                # Display images in two columns
                for i, img_url in enumerate(image_urls):
                    if i < 3:  # First 3 images in left column
                        with col1:
                            st.image(img_url, caption=f"Image {i+1}")
                    elif i < 6:  # Next 3 images in right column
                        with col2:
                            st.image(img_url, caption=f"Image {i+1}")
            else:
                st.warning("No images found from Unsplash for this keyword.")
        else:
            st.warning("Please enter your Unsplash API key to view images.")

# random learning
if st.button("Random_learning"):
    generate_paragraph_randomly()

# sidebar
# download and random
note_dolo_to_json()
if st.sidebar.button("Random learning"):
    generate_paragraph_randomly()
